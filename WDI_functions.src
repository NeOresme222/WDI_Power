{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Define a Function to List Data Values for Timeline Given Country Code and Indicator Code'''\n",
    "\n",
    "\n",
    "\n",
    "def WDI_indicator_code_plot(indicator, title, yaxis, ax):\n",
    "    \n",
    "    \"\"\"A template for creating a plot according to yearly timeline in WDI Data csv file\n",
    "\n",
    "    Args:\n",
    "        param1: the specific indicator \n",
    "        param2: title for the plot \n",
    "        param 3: label for the y-axis\n",
    "        param 4: ax\n",
    "\n",
    "    Returns:\n",
    "        A plot for the specific indicator\n",
    "\n",
    "    \"\"\"\n",
    "    x_elec_access = data_year_list\n",
    "    y_elec_access = indicator.iloc[4:]\n",
    "        \n",
    "    \n",
    "    ax.plot(x_elec_access, y_elec_access, label = indicator.iloc[0])\n",
    "    ax.set_title(title)\n",
    "    ax.set_ylabel(yaxis)\n",
    "    ax.set_xlabel('Year')\n",
    "    ax.legend()\n",
    "    return "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Creates a cumulative plot given '''\n",
    "\n",
    "def indicator_cumulative_plot(indicator_for_list, title, yaxis):\n",
    "    \n",
    "    ind_data_list = df_data[df_data['Indicator Code'] == indicator_for_list]\n",
    "    fig, ax = plt.subplots(figsize = (25,12))\n",
    "    \n",
    "    for num in range(0,len(ind_data_list)):\n",
    "        indicator = ind_data_list.iloc[num,:]\n",
    "        WDI_indicator_code_plot(indicator, title, yaxis, ax=ax)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def list_cumulative_plot(in_list, title, yaxis):\n",
    "    \n",
    "    fig, ax = plt.subplots(figsize = (25,12))\n",
    "    \n",
    "    for num in range(0,len(in_list)):\n",
    "        indicator = in_list.iloc[num,:]\n",
    "        WDI_indicator_code_plot(indicator, title, yaxis, ax=ax)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def dictionary_maker(df, group_col, spec_col):\n",
    "    \"\"\"finds the unique values associated with a column and groups them.\n",
    "    input: dataframe, column to group by, column with specific values to populate the dictionary with \n",
    "    output: unique groups, dictionary according to keys (group by) and values (specific values)\"\"\"\n",
    "    \n",
    "    return df[group_col].unique(), dict(df.groupby(group_col)[spec_col].apply(list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Cumulative Line Plots for GNI Brackets Given Indicator Code'''\n",
    "\n",
    "def income_mean_plots_from_indicator(indicator_code,title, yaxis):\n",
    "    \n",
    "    ind_df = df_data[df_data['Indicator Code'] == indicator_code]\n",
    "    dni_list = [l_list, lm_list, um_list, h_list]\n",
    "    \n",
    "    mean_list = []\n",
    "    for bracket in dni_list:\n",
    "        income_lvl = ind_df[ind_df['Country Code'].isin(bracket)]\n",
    "        mean_list.append(income_lvl.mean())\n",
    "    \n",
    "    WDI_list_mean_plot(mean_list,title,yaxis)\n",
    "        \n",
    "        \n",
    "def WDI_list_mean_plot(in_df_list, title, yaxis):\n",
    "    \n",
    "    fig, ax = plt.subplots(figsize = (25,12))\n",
    "    legend = ['Low',\"Low Middle\", \"Upper Middle\", \"High\"]\n",
    "    \n",
    "    for num in range(0,len(in_df_list)):\n",
    "        WDI_mean_plot(legend[num],in_df_list[num], title, yaxis, ax=ax)\n",
    "        \n",
    "\n",
    "def WDI_mean_plot(label, indicator, title, yaxis, ax):\n",
    "    \n",
    "    \"\"\"Takes an array delimited by a list and a parameter; returns a list of arrays for input list \n",
    "\n",
    "    Args:\n",
    "        param1: a list\n",
    "        param2: an inidcator\n",
    "\n",
    "    Returns:\n",
    "        An array for each member of the input list\n",
    "\n",
    "    \"\"\"\n",
    "    x_elec_access = data_year_list\n",
    "    y_elec_access = indicator\n",
    "        \n",
    "    \n",
    "    ax.plot(x_elec_access, y_elec_access, label = label)\n",
    "    ax.set_title(title)\n",
    "    ax.set_ylabel(yaxis)\n",
    "    ax.set_xlabel('Year')\n",
    "    ax.legend(bbox_to_anchor = (0.09,.3))\n",
    "    return "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Search WDI_Data for Sepcific Words'''\n",
    "\n",
    "def df_containing_words(df, col_name, keyword):\n",
    "    '''input: dataframe, column name as string, the word you are searching for as a string\n",
    "    output: dataframe filtered to contain keyword'''\n",
    "    return df[df[col_name].str.find(keyword) == 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def income_boxplot(df, indicator_code, col_year, ):\n",
    "    \n",
    "    dni_list = [l_list, lm_list, um_list, h_list]\n",
    "    box_list = []\n",
    "    df_1 = df[df['Indicator Code'] == indicator_code]\n",
    "    title = df_1[\"Indicator Name\"].iloc[0]\n",
    "    for bracket in dni_list:\n",
    "        group = df_1[df_1['Country Code'].isin(bracket)]\n",
    "        box_list.append(group[col_year].dropna())\n",
    "        \n",
    "        \n",
    "    fig, ax = plt.subplots()\n",
    "    ax.boxplot(box_list, labels = ['Low', 'Low Middle', 'Upper Middle', 'High'], showfliers = False)\n",
    "#     fig.suptitle('bold figure suptitle', fontsize=14, fontweight='bold')\n",
    "    ax.set_title(str(title)+' for '+str(col_year))\n",
    "    ax.set_xlabel('GNI Bracket')\n",
    "#     ax.set_ylabel('ylabel')\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
